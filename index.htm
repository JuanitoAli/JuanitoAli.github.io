<html lang="en">
<head>
  <title>Find your room easily!</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="css\bootstrap.css">
  <script src="js\jquery-3.2_0.js"></script>
  <script src="js\bootstrap.js"></script>
  <script src= 'js\d3.js'></script>


  <style>
		/* GoogleMap specs */
		#map {
			width: 100%;
			height: 600px;
			background-color: CadetBlue;
		}

    /* Set black background color, white text and some padding */
    footer {
      background-color: #555;
      color: white;
      padding: 15px;
    }
  </style>
</head>
<body>

	<nav class="navbar navbar-inverse">
	  <div class="container-fluid">
	    <div class="navbar-header">
	      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
	        <span class="icon-bar"></span>
	        <span class="icon-bar"></span>
	        <span class="icon-bar"></span>
	      </button>
	      <a class="navbar-brand" href="#">RoomFinder</a>
	    </div>
	    <div class="collapse navbar-collapse" id="myNavbar">
	      <ul class="nav navbar-nav">
	        <li class="active"><a href="#">Home</a></li>
	        <li><a href="#">#Option1</a></li>
	        <li><a href="#">#Option2</a></li>
	        <li><a href="#">#Option3</a></li>
	      </ul>
	      <ul class="nav navbar-nav navbar-right">
	        <li><a href="#"><span class="glyphicon glyphicon-log-in"></span> Login</a></li>
	      </ul>
	    </div>
	  </div>
	</nav>

  <div class="container-fluid text-center">
	  <div class="row content">
	    <div class="col-sm-6" >
	      <h1>Chart</h1>
        <svg width="500" height="500" font-family="sans-serif" font-size="10" text-anchor="middle"></svg>
        <script src="https://d3js.org/d3.v4.min.js"></script>
        <script>
          var svg = d3.select("svg"),
              width = +svg.attr("width"),
              height = +svg.attr("height");

          var format = d3.format(",d");

          var color = d3.scaleOrdinal(d3.schemeCategory20c);

          var pack = d3.pack()
              .size([width, height])
              .padding(1.5);

          d3.csv("Dataset/fakeCount.csv", function(d) {
            d.value = +d.value;
            if (d.value) return d;
          }, function(error, classes) {
            if (error) throw error;

            var root = d3.hierarchy({children: classes})
                .sum(function(d) { return d.value; })
                .each(function(d) {
                  if (id = d.data.id) {
                    var id, i = id.lastIndexOf(".");
                    d.id = id;
                    d.package = id.slice(0, i);
                    d.class = id.slice(i + 1);
                  }
                });

            var node = svg.selectAll(".node")
              .data(pack(root).leaves())
              .enter().append("g")
                .attr("class", "node")
                .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

            node.append("circle")
                .attr("id", function(d) { return d.id; })
                .attr("r", function(d) { return d.r; })
                .style("fill", function(d) { return color(d.package); });

            node.append("clipPath")
                .attr("id", function(d) { return "clip-" + d.id; })
              .append("use")
                .attr("xlink:href", function(d) { return "#" + d.id; });

            node.append("text")
                .attr("clip-path", function(d) { return "url(#clip-" + d.id + ")"; })
              .selectAll("tspan")
              .data(function(d) { return d.class.split(/(?=[A-Z][^A-Z])/g); })
              .enter().append("tspan")
                .attr("x", 0)
                .attr("y", function(d, i, nodes) { return 13 + (i - nodes.length / 2 - 0.5) * 10; })
                .text(function(d) { return d; });

            node.append("title")
                .text(function(d) { return d.id + "\n" + format(d.value); });
          });
        </script>
	      <hr>
	    </div>

      <div class="col-sm-6">
        <div id="map"></div>
        <p id="000" style="background-color:orange"></p>
        <p id="001" style="background-color:powderblue"></p>
      </div>
	  </div>
	</div>

  <!--map rendering-->
  <script>
    // Callback function from GoogleMap API
    function drawMap() {
      var latLngDeptComp = {lat: 41.8708, lng: -87.6505}; //  Department of Computer Science â€“ University of Illinois

      var map = new google.maps.Map(document.getElementById("map"), {
        zoom: 10,
        center: latLngDeptComp,
        mapTypeId: 'satellite'
      });

      // Department of Computer Science marker
      var marker = new google.maps.Marker({
        position: latLngDeptComp,
        map: map,
        title: 'Chicago University',
        animation: google.maps.Animation.BOUNCE,
        icon: "icon/education/university.png"
      });

      // JSON loading via ajax request
      var url = [
        /*
            linkNumber = 0
            Police_Stations.json
            JSON =: {meta: object, data: array[23]}
            coordinates of station k at JSON.data[k][22]
        */
        "https://data.cityofchicago.org/api/views/z8bn-74gv/rows.json?accessType=DOWNLOAD",
        /*
          linkNumber = 1
          Affordable_Rental_Housing_Developments.json

        */
        "https://data.cityofchicago.org/api/views/s6ha-ppgi/rows.json?accessType=DOWNLOAD",
        /*
          linkNumber = 2
          SSMMA_Median_Home_Value.json
        */
        "https://data.illinois.gov/api/views/miqf-743d/rows.json?accessType=DOWNLOAD"
        /*
          linkNumber = 3
          Boundaries - Police Districts (current)
        */
        "https://data.cityofchicago.org/api/views/24zt-jpfn/rows.json?accessType=DOWNLOAD"
        /*
          linkNumber = 4
          Boundaries - Police Beats (current)
        */
        "https://data.cityofchicago.org/api/views/n9it-hstw/rows.json?accessType=DOWNLOAD"
      ]


      // puts markers of coordinates specified in var url
      function putMarkersOfURL(linkNumber) {
          var response;
          var request = new XMLHttpRequest();
          request.onreadystatechange = function() {
            if(this.readyState == 4 && this.status == 200) {
              switch(linkNumber) {
                // Markers for Police_Stations.json
                case 0:
                  response = JSON.parse(this.responseText);
                  for(var i = 0; i < response.data.length; i++) {
                    var coord = response.data[i][22]
                    var latLng = new google.maps.LatLng(coord[1], coord[2]);
                    var marker = new google.maps.Marker({
                      position: latLng,
                      map: map,
                      icon: "icon/offices/police.png"});
                  }
                  break;

                // Markers for Affordable_Rental_Housing_Developments.json
                case 1:
                  response = JSON.parse(this.responseText);
                  for(var i = 0; i < response.data.length; i++) {
                    var coordinate = new google.maps.LatLng(response.data[i][19], response.data[i][20]);
                    var marker = new google.maps.Marker({
                      position: coordinate,
                      map: map,
                      icon: "icon/offices/house2.png"
                    })
                  }
                  break;
            }
          }
        };
          request.open("GET", url[linkNumber], true);
          request.send();
      }

      putMarkersOfURL(0);
      putMarkersOfURL(1);
    };
  </script>

  <!--google maps API-->
  <script async defer
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBMuMYjahmL5PqqH_RwtIxveCdbbzN7XDE&callback=drawMap"></script>

	<footer class="container-fluid text-center">
	  <p>RoomFinder 2017</p>
	</footer>

	</body>
</html>
